@using MudBlazor;
@using MudExtensions.Enums;
@using HardHatCore.HardHatC2Client.Components.ImplantCreation
@inherits ImplantCreation_PluginContent;

<!-- Since rivet does not currently have any dynamic commands or modules these sections are commented out for clarity-->
@* <CommandSelectionStep ImpCommandForm="" ImpCommandList="@ImpCommandList" OrderCheckFunc="@OrderMethod"></CommandSelectionStep>
<ModuleSelectionStep ImpModuleForm="" ImpModuleList="@ImpModuleList" OrderCheckFunc="@OrderMethod"></ModuleSelectionStep> *@

<!-- This step displays build options based on the metadata provided in the Name_Creation_plugin.cs file-->
<BuildOptionsStep buildStepForm="@_form2"></BuildOptionsStep>
<FinalizeStep formData="formData"></FinalizeStep>
<br>



@code {

    //this is needed because each implant may have a custom amount of steps, in this case 1 vs the Engineers 4
    public  MudForm _form2 { get; set; } = new MudForm();
    private EventCallback<int> OnStepChangeCallback => EventCallback.Factory.Create<int>(this, HandleStepChange);

    //makes sure we are using our version of the step change UI as needed 
    private void HandleStepChange(int newIndex)
    {
        //we do it this way so we know the step has changed to where we want to start using our custom step check
        if(Stepper.GetActiveIndex() == 1)
        {
            Stepper.PreventStepChangeAsync = CheckChange;
        }
    }

    //should be overriden can use some of the same logic as the base but will need to set the proper step number an implement any implant specific checks on the step progression
    public override async Task<bool> CheckChange(StepChangeDirection direction)
    {
        // Always allow stepping backwards, even if forms are invalid
        if (direction == StepChangeDirection.Backward)
        {
            return false;
        }
        // the 0 index is for the first step in the implantCreation.razor file
        // include 1 check for each step you have, in this case Rivet only has the 2 steps 
        if (Stepper.GetActiveIndex() == 1)
        {
            _loading = true;
            StateHasChanged();
            await Task.Delay(100);
            await _form2.Validate();
            _loading = false;
            StateHasChanged();
            return !_form2.IsValid;
        }
        else if (Stepper.GetActiveIndex() == 2)
        {
            _loading = true;
            StateHasChanged();
            await Task.Delay(100);
            _loading = false;
            StateHasChanged();
            //just return false here because the last step just displays the filled info one last time and does not have a form to validate
            return false;
        }
        else
        {
            return false;
        }
    }

    
    //should be overriden to set the implants implementations of the required funcs and to add the forms to the stepperForms list
    protected override async Task OnInitializedAsync()
    {
        if(stepperForms.Count() < 2)
        {
            //add our form to the base list of forms so it can be reset
            stepperForms.Add(_form2);
            //update the Stepper PreventStepChangeAsync function to be our overridden one
            Stepper.ActiveStepChanged = OnStepChangeCallback;
            
        }
    }
}